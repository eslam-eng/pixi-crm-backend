<?php

namespace App\Services\Report;

use App\Models\Tenant\ReportExecution;
use Carbon\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Storage;
use Maatwebsite\Excel\Facades\Excel;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Writer\Csv;
use PhpOffice\PhpSpreadsheet\Writer\Pdf\Dompdf;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;

class ReportExportService
{
    /**
     * Export report data to Excel format
     */
    public function exportToExcel(ReportExecution $execution, Collection $data, array $summary = []): string
    {
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        // Set report title
        $sheet->setCellValue('A1', $execution->report->name);
        $sheet->mergeCells('A1:F1');
        $sheet->getStyle('A1')->getFont()->setBold(true)->setSize(16);
        $sheet->getStyle('A1')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);

        // Set report metadata
        $sheet->setCellValue('A2', 'Generated on: ' . Carbon::now()->format('Y-m-d H:i:s'));
        $sheet->setCellValue('A3', 'Generated by: ' . $execution->executedBy?->name);
        $sheet->setCellValue('A4', 'Records processed: ' . $execution->records_processed);

        // Add summary data
        if (!empty($summary)) {
            $row = 6;
            $sheet->setCellValue("A{$row}", 'Summary');
            $sheet->getStyle("A{$row}")->getFont()->setBold(true);
            $row++;

            foreach ($summary as $key => $value) {
                $sheet->setCellValue("A{$row}", ucwords(str_replace('_', ' ', $key)));
                $sheet->setCellValue("B{$row}", is_array($value) ? json_encode($value) : $value);
                $row++;
            }
            $row += 2;
        } else {
            $row = 6;
        }

        // Add data headers
        if ($data->isNotEmpty()) {
            $headers = array_keys($data->first());
            $col = 'A';
            foreach ($headers as $header) {
                $sheet->setCellValue("{$col}{$row}", ucwords(str_replace('_', ' ', $header)));
                $sheet->getStyle("{$col}{$row}")->getFont()->setBold(true);
                $sheet->getStyle("{$col}{$row}")->getFill()
                    ->setFillType(Fill::FILL_SOLID)
                    ->getStartColor()->setRGB('E0E0E0');
                $col++;
            }
            $row++;

            // Add data rows
            foreach ($data as $rowData) {
                $col = 'A';
                foreach ($headers as $header) {
                    $value = $rowData->$header ?? '';
                    $sheet->setCellValue("{$col}{$row}", $value);
                    $col++;
                }
                $row++;
            }

            // Auto-size columns
            foreach (range('A', $col) as $columnID) {
                $sheet->getColumnDimension($columnID)->setAutoSize(true);
            }
        }

        // Save file
        $fileName = "report_{$execution->id}_" . Carbon::now()->format('Y-m-d_H-i-s') . '.xlsx';
        $filePath = "exports/{$fileName}";

        $writer = new Xlsx($spreadsheet);
        $writer->save(storage_path("app/public/{$filePath}"));

        return $filePath;
    }

    /**
     * Export report data to CSV format
     */
    public function exportToCsv(ReportExecution $execution, Collection $data, array $summary = []): string
    {
        $fileName = "report_{$execution->id}_" . Carbon::now()->format('Y-m-d_H-i-s') . '.csv';
        $filePath = "exports/{$fileName}";

        $file = fopen(storage_path("app/public/{$filePath}"), 'w');

        // Add report metadata
        fputcsv($file, ['Report Name', $execution->report->name]);
        fputcsv($file, ['Generated on', Carbon::now()->format('Y-m-d H:i:s')]);
        fputcsv($file, ['Generated by', $execution->executedBy?->name]);
        fputcsv($file, ['Records processed', $execution->records_processed]);
        fputcsv($file, []); // Empty row

        // Add summary data
        if (!empty($summary)) {
            fputcsv($file, ['Summary']);
            foreach ($summary as $key => $value) {
                fputcsv($file, [ucwords(str_replace('_', ' ', $key)), is_array($value) ? json_encode($value) : $value]);
            }
            fputcsv($file, []); // Empty row
        }

        // Add data headers and rows
        if ($data->isNotEmpty()) {
            $headers = array_keys($data->first());
            fputcsv($file, $headers);

            foreach ($data as $rowData) {
                $row = [];
                foreach ($headers as $header) {
                    $row[] = $rowData->$header ?? '';
                }
                fputcsv($file, $row);
            }
        }

        fclose($file);

        return $filePath;
    }

    /**
     * Export report data to PDF format
     */
    public function exportToPdf(ReportExecution $execution, Collection $data, array $summary = []): string
    {
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        // Set report title
        $sheet->setCellValue('A1', $execution->report->name);
        $sheet->mergeCells('A1:F1');
        $sheet->getStyle('A1')->getFont()->setBold(true)->setSize(16);
        $sheet->getStyle('A1')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);

        // Set report metadata
        $sheet->setCellValue('A2', 'Generated on: ' . Carbon::now()->format('Y-m-d H:i:s'));
        $sheet->setCellValue('A3', 'Generated by: ' . $execution->executedBy?->name);
        $sheet->setCellValue('A4', 'Records processed: ' . $execution->records_processed);

        // Add summary data
        if (!empty($summary)) {
            $row = 6;
            $sheet->setCellValue("A{$row}", 'Summary');
            $sheet->getStyle("A{$row}")->getFont()->setBold(true);
            $row++;

            foreach ($summary as $key => $value) {
                $sheet->setCellValue("A{$row}", ucwords(str_replace('_', ' ', $key)));
                $sheet->setCellValue("B{$row}", is_array($value) ? json_encode($value) : $value);
                $row++;
            }
            $row += 2;
        } else {
            $row = 6;
        }

        // Add data headers
        if ($data->isNotEmpty()) {
            $headers = array_keys($data->first());
            $col = 'A';
            foreach ($headers as $header) {
                $sheet->setCellValue("{$col}{$row}", ucwords(str_replace('_', ' ', $header)));
                $sheet->getStyle("{$col}{$row}")->getFont()->setBold(true);
                $sheet->getStyle("{$col}{$row}")->getFill()
                    ->setFillType(Fill::FILL_SOLID)
                    ->getStartColor()->setRGB('E0E0E0');
                $col++;
            }
            $row++;

            // Add data rows
            foreach ($data as $rowData) {
                $col = 'A';
                foreach ($headers as $header) {
                    $value = $rowData->$header ?? '';
                    $sheet->setCellValue("{$col}{$row}", $value);
                    $col++;
                }
                $row++;
            }

            // Auto-size columns
            foreach (range('A', $col) as $columnID) {
                $sheet->getColumnDimension($columnID)->setAutoSize(true);
            }
        }

        // Save file
        $fileName = "report_{$execution->id}_" . Carbon::now()->format('Y-m-d_H-i-s') . '.pdf';
        $filePath = "exports/{$fileName}";

        $writer = new Dompdf($spreadsheet);
        $writer->save(storage_path("app/public/{$filePath}"));

        return $filePath;
    }

    /**
     * Generate export file based on format
     */
    public function generateExport(ReportExecution $execution, string $format, Collection $data, array $summary = []): string
    {
        // Ensure exports directory exists
        Storage::disk('public')->makeDirectory('exports');

        switch (strtolower($format)) {
            case 'excel':
            case 'xlsx':
                return $this->exportToExcel($execution, $data, $summary);
            case 'csv':
                return $this->exportToCsv($execution, $data, $summary);
            case 'pdf':
                return $this->exportToPdf($execution, $data, $summary);
            default:
                throw new \InvalidArgumentException("Unsupported export format: {$format}");
        }
    }

    /**
     * Get file size in bytes
     */
    public function getFileSize(string $filePath): int
    {
        return Storage::disk('public')->size($filePath);
    }

    /**
     * Clean up old export files
     */
    public function cleanupOldExports(int $daysOld = 7): int
    {
        $cutoffDate = Carbon::now()->subDays($daysOld);
        $files = Storage::disk('public')->files('exports');
        $deletedCount = 0;

        foreach ($files as $file) {
            $lastModified = Carbon::createFromTimestamp(Storage::disk('public')->lastModified($file));
            if ($lastModified->lt($cutoffDate)) {
                Storage::disk('public')->delete($file);
                $deletedCount++;
            }
        }

        return $deletedCount;
    }
}
